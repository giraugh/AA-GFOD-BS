{"version":3,"sources":["config/paths.js","public/img/BotHello.svg","public/img/BotThinking.svg","public/img/BotAha.svg","components/RobotImage/RobotImage.js","config/game.js","hooks/useResponses.js","hooks/usePivot.js","util/game.js","hooks/useQuestionType.js","config/strings.js","components/GameBox/GameBox.js","components/App/App.js","index.js"],"names":["guessPath","resultPath","RobotImageFromPath","p","className","src","alt","RobotImage","path","exact","component","robotImageHello","robotImageThinking","robotImageAha","MAX_AGE","createEmpty","Array","from","length","useResponses","create","set","responses","setResponse","index","pivot","response","questionType","state","map","v","i","clear","usePivot","previousResponses","slice","some","x","max","min","res","Math","floor","calcPivot","QUESTION_TYPES","useQuestionType","type","randomizeQuestionType","random","strings","greeting","greetingPrompt","greetingHint","guess","value","end","GuessBox","history","useHistory","count","useParams","step","Number","replace","onResponse","push","onClick","GreetingBox","to","EndBox","GameBox","App","isExternal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70d586af.chunk.js","sourcesContent":["export const homePath = '/'\nexport const guessPath = '/guess/:count'\nexport const resultPath = '/result'\n\n","export default __webpack_public_path__ + \"static/media/BotHello.f9a02c85.svg\";","export default __webpack_public_path__ + \"static/media/BotThinking.a19afa7c.svg\";","export default __webpack_public_path__ + \"static/media/BotAha.12000c8e.svg\";","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport './RobotImage.css'\n\nimport { homePath, guessPath, resultPath } from '../../config/paths'\n\nimport robotImageHello from '../../public/img/BotHello.svg'\nimport robotImageThinking from '../../public/img/BotThinking.svg'\nimport robotImageAha from '../../public/img/BotAha.svg'\n\nconst RobotImage = () => {\n  return (\n    <>\n      <Route\n        path={homePath}\n        exact\n        component={RobotImageFromPath(robotImageHello)}\n      />\n      <Route\n        path={guessPath}\n        component={RobotImageFromPath(robotImageThinking)}\n      />\n      <Route path={resultPath} component={RobotImageFromPath(robotImageAha)} />\n    </>\n  )\n}\n\nconst RobotImageFromPath = (p) => () => (\n  <img className=\"robot-image\" src={p} alt={'Robot mascot'} />\n)\n\nexport default RobotImage\n","export const GUESS_COUNT = 7\nexport const MIN_AGE = 1\nexport const MAX_AGE = 2 ** GUESS_COUNT\n","import create from 'zustand'\n\nimport { GUESS_COUNT } from '../config/game'\n\nconst createEmpty = () => Array.from({ length: GUESS_COUNT })\n\nconst useResponses = create((set) => ({\n  responses: createEmpty(),\n  setResponse: (index, pivot, response, questionType = 'gt') =>\n    set((state) => ({\n      responses: state.responses.map((v, i) =>\n        index === i ? [pivot, response, questionType] : v\n      ),\n    })),\n  clear: () => set({ responses: createEmpty() }),\n}))\n\nexport default useResponses\n","import useResponses from './useResponses'\nimport { calcPivot } from '../util/game'\n\nconst usePivot = (index) => {\n  const { responses } = useResponses()\n  const previousResponses = responses.slice(0, index)\n  if (previousResponses.some(x => !x))\n    return\n  const pivot = calcPivot(previousResponses)\n  return pivot\n}\n\nexport default usePivot\n","import { MIN_AGE, MAX_AGE } from '../config/game'\n\nexport const calcPivot = (responses) => {\n  let max = MAX_AGE\n  let min = MIN_AGE\n  for (let [pivot, res, questionType] of responses) {\n    if (questionType === 'gt') {\n      if (res) {\n        min = pivot + 1\n      } else {\n        max = pivot\n      }\n    }\n\n    if (questionType === 'lt') {\n      if (res) {\n        max = pivot - 1\n      } else {\n        min = pivot\n      }\n    }\n  }\n\n  return Math.floor((max + min) / 2)\n}\n","import create from 'zustand'\n\nconst QUESTION_TYPES = ['gt', 'lt']\n\nconst useQuestionType = create((set) => ({\n  type: 'gt',\n  randomizeQuestionType: () =>\n    set({ questionType: QUESTION_TYPES[Math.floor(Math.random() * QUESTION_TYPES.length)] }),\n}))\n\nexport default useQuestionType\n","const locale = 'EN_AU'\nconst strings = {\n  EN_AU: {\n    greeting: `Hey there!`,\n    greetingPrompt: `I reckon I can guess your age!`,\n    greetingHint: `Or you could think of someone else's age`,\n    guess: (value, questionType) =>\n      `Are you ${questionType === 'gt' ? 'more' : 'less'} than ${value} years old?`,\n    end: (value) => `I think you are ${value} year${value > 1 ? 's' : ''} old!`,\n  },\n}\n\nexport default strings[locale]\n","import React from 'react'\nimport { Route, Link, useHistory, useParams } from 'react-router-dom'\n\nimport { homePath, guessPath, resultPath } from '../../config/paths'\nimport RobotImage from '../RobotImage/RobotImage'\nimport { useResponses, usePivot, useQuestionType } from '../../hooks'\nimport strings from '../../config/strings'\nimport { GUESS_COUNT } from '../../config/game'\n\nimport './GameBox.css'\n\nconst GameBox = () => {\n  return (\n    <div className=\"game-box\">\n      <RobotImage />\n      <div className=\"game-box-content\">\n        <Route path={homePath} exact component={GreetingBox} />\n        <Route path={guessPath} component={GuessBox} />\n        <Route path={resultPath} component={EndBox} />\n      </div>\n    </div>\n  )\n}\n\nconst GuessBox = () => {\n  const history = useHistory()\n  const { count } = useParams()\n  const { setResponse } = useResponses()\n  const { questionType, randomizeQuestionType } = useQuestionType()\n  \n  // Calculate the pivot given the user's responses up to this step\n  const step = Number(count)\n  const pivot = usePivot(step - 1)\n\n  // If the user refreshes we lose their responses\n  if (!pivot) {\n    history.replace('/')\n  }\n\n  // Add a response when a yes / no button is pressed\n  const onResponse = (response) => () => {\n    // Add a response\n    setResponse(step - 1, pivot, response, questionType)\n\n    // Change next response type\n    randomizeQuestionType()\n\n    // Change page to the next guess / show results if no guesses remaining\n    if (step < GUESS_COUNT) {\n      history.push(`/guess/${step+1}`)\n    } else {\n      history.push('/result')\n    }\n  }\n\n  return (\n    <div className=\"center\">\n      {strings.guess(pivot, questionType)}\n      <div className=\"button-group\">\n        <button className=\"action-button\" onClick={onResponse(false)}>\n          No\n        </button>\n        <button className=\"action-button\" onClick={onResponse(true)}>\n          Yes\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst GreetingBox = () => {\n  return (\n    <div>\n      {strings.greeting}\n      <br />\n      {strings.greetingPrompt}\n      <span className=\"hint\">({strings.greetingHint})</span>\n      <Link to=\"/guess/1\" className=\"action-button\">\n        Okay!\n      </Link>\n    </div>\n  )\n}\n\nconst EndBox = () => {\n  const history = useHistory()\n  const { clear } = useResponses()\n  const pivot = usePivot(GUESS_COUNT)\n\n  // If user refreshes, we lose their responses\n  if (!pivot) {\n    history.replace('/')\n  }\n\n  const onRestart = () => {\n    clear()\n    history.push('/')\n  }\n\n  return (\n    <div className=\"center\">\n      {strings.end(pivot)}\n      <button className=\"action-button\" onClick={onRestart}>\n        Play Again\n      </button>\n    </div>\n  )\n}\n\nexport default GameBox\n","import React from 'react'\nimport { HashRouter as Router } from 'react-router-dom'\n\nimport './App.css'\n\nimport RobotImage from '../RobotImage/RobotImage'\nimport GameBox from '../GameBox/GameBox'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className='app'>\n        <RobotImage isExternal={true} />\n        <GameBox />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}